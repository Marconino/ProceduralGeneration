#pragma kernel GenerateNoise

#include "FastNoiseLite.hlsl"

int _nbPointsPerChunk;
int _ThreadGroups;
int _Octaves;
int _Seed;
float _Amplitude;
float _Frequency;
float _Lacunarity;
float _GroundOffset;
float _OffsetX;
float _OffsetY;
float _OffsetZ;
float _Scale;
RWStructuredBuffer<float> _DensityValues;

int GetThreadOffset(uint3 _groupID);

[numthreads(8, 8, 8)]
void GenerateNoise(uint thread1DID : SV_GroupIndex, uint3 groupID : SV_GroupID)
{
    fnl_state noise = fnlCreateState(_Seed);
    noise.noise_type = FNL_NOISE_OPENSIMPLEX2;
    noise.fractal_type = FNL_FRACTAL_FBM;
    noise.frequency = _Frequency;
    noise.octaves = _Octaves;
    noise.lacunarity = _Lacunarity;
    
    thread1DID += GetThreadOffset(groupID);    
    int x = thread1DID % _nbPointsPerChunk;
    int y = (thread1DID / _nbPointsPerChunk) % _nbPointsPerChunk;
    int z = thread1DID / (_nbPointsPerChunk * _nbPointsPerChunk); //= (numthreads * dispatch)^2

    float3 posNoise = float3(x, y, z);
    float3 sample = float3((_OffsetX + posNoise.x) * _Scale, (_OffsetY + posNoise.y) * _Scale, (_OffsetZ + posNoise.z) * _Scale);
    float noiseValue = (fnlGetNoise3D(noise, sample.x, sample.y, sample.z) + 1) / 2;

    _DensityValues[thread1DID] = noiseValue;
    //float ground = -(posNoise.y + _OffsetY) + (_GroundOffset * _nbPointsPerChunk);
    //float n = ground + fnlGetNoise3D(noise, _OffsetX + posNoise.x, _OffsetY + posNoise.y, _OffsetZ + posNoise.z) * _Amplitude;
    //_DensityValues[thread1DID] = n;
}

int GetThreadOffset(uint3 _groupID)
{
    int offsetPartX = 512 * _groupID.x;
    int offsetPartY = 512 * _ThreadGroups * _groupID.y;
    int offsetPartZ = 512 * (_ThreadGroups * _ThreadGroups) * _groupID.z;

    return offsetPartX + offsetPartY + offsetPartZ;
}